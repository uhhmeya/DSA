{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww12860\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\

\f1 	Hello, my name is Ameya. I am a freshmen currently studying computer science at the University of Rochester. My intended major is computer science. My email is amandhar@u.rochester.edu. My personal email is ameyamandhare17@gmail.com. My phone number is 571-577-3902.  This is Lab 67for my CSC 172 class.\
\
	This lab involves implementing the encoding and decoding methods from the Huffman algorithm. The encoding method converts the input file (alice30.txt) into a binary file (alice30.enc) by compressing it. The decoding method converts the binary file (alice30.enc) back to the input file (alice30_decoded.txt) by using a frequency file which is a file that counts the number of occurrences of each character in binary. It contains the binary representation of each character then a colon then the number of times it appears. The Proj2.ZIP file contains the HuffmanSubmit.java file and the README file as indicated by the directions. The file assumes that the input files are in the working directory and does not handle null input. The HuffmanSubmit.java class can be compiled by using the javac HuffmanSubmit.java command in the command line. The alice30 file can be encoded by \cf2 \expnd0\expndtw0\kerning0
java HuffmanSubmit alice30.txt alice30.enc freq.txt and decoded by java HuffmanSubmit alice30.enc alice30_decoded.txt freq.txt. }